package com.wedwise.calendar;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONObject;

import com.wedwise.common.GlobalCommonMethods;
import com.wedwise.common.GlobalCommonValues;
import com.wedwise.dialogs.ErrorDialog;
import com.wedwiseapp.R;
import com.wedwiseapp.util.PreferenceUtil;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Paint;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.NumberPicker;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

/**
 * Shows off the most basic usage
 */
public class CalendarActivity extends FragmentActivity implements OnClickListener
{

	MFCalendarView mf;
	Button btnBack,btnSchedule;
	TextView tvTitle,tvScheduledDate;
	TimePicker tpScheduleVisit;
	Resources system;
	int hour_numberpicker_id,minute_numberpicker_id,ampm_numberpicker_id;
	NumberPicker hour_numberpicker,minute_numberpicker,ampm_numberpicker;
	String response="",url;
	ProgressDialog progress;
	Context mContext;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		//		setTheme(android.R.style.Theme_Holo_Light_NoActionBar_Fullscreen);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.calendar_activity);
		mf = (MFCalendarView) findViewById(R.id.mFCalendarView);
		tvTitle=(TextView) findViewById(R.id.tvTitle);
		btnBack=(Button) findViewById(R.id.btnBack);
		btnSchedule=(Button) findViewById(R.id.btnSchedule);
		tvScheduledDate=(TextView) findViewById(R.id.tvScheduledDate);
		tpScheduleVisit=(TimePicker) findViewById(R.id.tpScheduleVisit);
		tvScheduledDate.setText("Visit scheduled at 2/05/2104 09:40 am");
		btnBack.setOnClickListener(this);
		btnSchedule.setOnClickListener(this);
		mContext=CalendarActivity.this;
		url=GlobalCommonValues.VENDOR_CALENDAR_HOME;
		new HttpAsyncTask().execute(url);
		//		CustomFonts.setFontOfTextView(CalendarActivity.this,tvTitle,"fonts/GothamRnd-Book_0.otf");
		//		CustomFonts.setFontOfButton(CalendarActivity.this,btnSchedule,"fonts/GothamRnd-Light.otf");
		//		CustomFonts.setFontOfTextView(CalendarActivity.this,tvScheduledDate,"fonts/GothamRnd-Light.otf");
		//		
		try {
			set_timepicker_text_colour();
		} catch (Exception e) {
			e.getMessage();
		}
		mf.setOnCalendarViewListener(new onMFCalendarViewListener() {

			@Override
			public void onDisplayedMonthChanged(int month, int year, String monthStr) {

				StringBuffer bf = new StringBuffer()
						.append(" month:")
						.append(month)
						.append(" year:")
						.append(year)
						.append(" monthStr: ")
						.append(monthStr);
				//				
				//				Toast.makeText(CalendarActivity.this,  bf.toString(),
				//						Toast.LENGTH_SHORT).show();
				//				
			}

			@Override
			public void onDateChanged(String date) {

				//				Toast.makeText(CalendarActivity.this, "onDateChanged:" + date, 
				//						Toast.LENGTH_SHORT).show();
			}
		});

		/**
		 * you can set calendar date anytime
		 * */
		//mf.setDate("2014-02-19");


		/**
		 * calendar events samples 
		 * */
		ArrayList<String> eventDays = new ArrayList<String>();
		eventDays.add("2014-02-25");
		eventDays.add(Util.getTomorrow());
		eventDays.add(Util.getCurrentDate());
		mf.setEvents(eventDays);
		Log.e("","locale:" + Util.getLocale());
	}


	private class HttpAsyncTask extends AsyncTask<String, Void, Void> {
		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			if(progress==null)
			{
				progress=new ProgressDialog(mContext);
				progress.show();		
			}
		}

		@Override
		protected Void doInBackground(String... params) {
			try {
				// Calling method for setting to be sent to the server
				SetData();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
		// onPostExecute displays the results of the AsyncTask.
		@Override
		protected void onPostExecute(Void result) {
			if(url.equals(GlobalCommonValues.CUSTOMER_VENDOR_MESSAGE_LIST))
			{
				if(progress!=null && progress.isShowing())
				{
					progress.dismiss();
					progress=null;
				}
			}
			if(!TextUtils.isEmpty(response) && GlobalCommonMethods.isJSONValid(response))
			{
				// In case of fetching message listing
				try {
					JSONObject jsonObj = new JSONObject(response);
					String _result = jsonObj.getString("result");
					if(_result.equalsIgnoreCase("error"))
					{
						String errorMessage=jsonObj.getString("message");
						ErrorDialog dialog=new ErrorDialog();
						dialog.newInstance(mContext, _result.toUpperCase(), errorMessage,null);
						dialog.setCancelable(false);
						dialog.show(getFragmentManager(), "test");
					}
					else if(_result.equalsIgnoreCase("success")){
						JSONArray jsonArray = jsonObj.getJSONArray("json");
						adapterMessageList.listChat.clear();
						for(int i=0;i<jsonArray.length();i++)
						{
							String receiver_name=new JSONObject(jsonArray.getString(i)).getString("receiver_name");
							String message=new JSONObject(jsonArray.getString(i)).getString("message");
							String msg_time=new JSONObject(jsonArray.getString(i)).getString("msg_time");	
							String receiver_email=new JSONObject(jsonArray.getString(i)).getString("receiver_email");
							HashMap<String, String> hashMap=new HashMap<String,String>();
							hashMap.put("receiver_name",receiver_name);
							hashMap.put("message",message);
							hashMap.put("msg_time", msg_time);
							hashMap.put("receiver_email", receiver_email);
							adapterMessageList.listChat.add(hashMap);
							adapterMessageList.notifyDataSetChanged();
						}
					}
				} catch (Exception e) {
					e.getMessage();
				}

				if(adapterMessageList.getCount()==0){
					TextView empty_view = (TextView)findViewById(R.id.empty_view);
					empty_view.setVisibility(View.VISIBLE);
				}
			}
		}
	}

	// Create GetData Method
	public  void  SetData()  throws  UnsupportedEncodingException
	{
		// Create data variable for sent values to server  
		String data="";
		String year="";
		String month="";
		String filter_string="";

		data= URLEncoder.encode("identifier", "UTF-8") 
				+ "=" + URLEncoder.encode(identifier, "UTF-8"); 

		data += "&" + URLEncoder.encode("page_no", "UTF-8") + "="
				+ URLEncoder.encode(page_no, "UTF-8"); 

		data += "&" + URLEncoder.encode("from_to", "UTF-8") 
		+ "=" + URLEncoder.encode(from_to,"UTF-8");

		data += "&" + URLEncoder.encode("msg_type", "UTF-8") 
		+ "=" + URLEncoder.encode("message","UTF-8");
		BufferedReader reader=null;
		// Send data 
		try
		{ 
			URL _url=null;
			// Defined URL  where to send data
			_url= new URL(GlobalCommonValues.CUSTOMER_VENDOR_MESSAGE_LIST);
			// Send POST data request

			URLConnection conn = _url.openConnection(); 
			conn.setDoOutput(true); 
			OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()); 
			wr.write( data ); 
			wr.flush(); 

			// Get the server response 
			reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			StringBuilder sb = new StringBuilder();
			String line = null;

			// Read Server Response
			while((line = reader.readLine()) != null)
			{
				// Append server response in string
				sb.append(line + "\n");
			}
			response = sb.toString();
		}
		catch(Exception ex)
		{
		}
		finally
		{
			try
			{
				reader.close();
			}
			catch(Exception ex) {}
		}
	}


	private void set_timepicker_text_colour(){

		try {
			system = Resources.getSystem();
			hour_numberpicker_id = system.getIdentifier("hour", "id", "android");
			minute_numberpicker_id = system.getIdentifier("minute", "id", "android");
			ampm_numberpicker_id = system.getIdentifier("amPm", "id", "android");
		} catch (Exception e) {
			e.getMessage();
		}

		try {
			hour_numberpicker = (NumberPicker) tpScheduleVisit.findViewById(hour_numberpicker_id);
			minute_numberpicker = (NumberPicker) tpScheduleVisit.findViewById(minute_numberpicker_id);
			ampm_numberpicker = (NumberPicker) tpScheduleVisit.findViewById(ampm_numberpicker_id);
		} catch (Exception e) {
			e.getMessage();
		}

		try {
			set_numberpicker_text_colour(hour_numberpicker);
			set_numberpicker_text_colour(minute_numberpicker);
			set_numberpicker_text_colour(ampm_numberpicker);
		} catch (Exception e) {
			e.getMessage();
		}
	}

	private void set_numberpicker_text_colour(NumberPicker number_picker){
		try {
			final int count = number_picker.getChildCount();
			final int color = getResources().getColor(R.color.OrangeColorTheme);
			for(int i = 0; i < count; i++){
				View child = number_picker.getChildAt(i);
				try{
					Field wheelpaint_field = number_picker.getClass().getDeclaredField("mSelectorWheelPaint");
					wheelpaint_field.setAccessible(true);

					((Paint)wheelpaint_field.get(number_picker)).setColor(color);
					((EditText)child).setTextColor(color);

					Field field2=number_picker.getClass().getDeclaredField("mSelectionDivider");

					if (field2.getName().equals("mSelectionDivider")) {
						field2.setAccessible(true);
						try {
							field2.set(number_picker, getResources().getDrawable(R.drawable.divider_orange));

						}catch (Exception e) {
							Toast.makeText(getApplicationContext(), e.getMessage(),1000).show();
						}
					}
					number_picker.invalidate();
				}
				catch(NoSuchFieldException e){
					Log.w("setNumberPickerTextColor", e);
				}
				catch(IllegalAccessException e){
					Log.w("setNumberPickerTextColor", e);
				}
				catch(IllegalArgumentException e){
					Log.w("setNumberPickerTextColor", e);
				}
			}

		} catch (Exception e) {
			e.getMessage();
		}
	}

	/*private void setDividerColor(TimePicker picker) {
        Field[] numberPickerFields = DatePicker.class.getDeclaredFields();
        for (Field field : numberPickerFields) {
            if (field.getName().equals("mSelectionDivider")) {
                field.setAccessible(true);
                try {
                    field.set(picker, getResources().getDrawable(R.drawable.divider));
                } catch (IllegalArgumentException e) {
                    Log.v("CalendarActivity", "Illegal Argument Exception");
                    e.printStackTrace();
                } catch (Resources.NotFoundException e) {
                    Log.v("CalendarActivity", "Resources NotFound");
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    Log.v("CalendarActivity", "Illegal Access Exception");
                    e.printStackTrace();
                }
                break;
            }
        }
    }*/

	@Override
	public void onBackPressed() {
		super.onBackPressed();
		overridePendingTransition(R.anim.right_in, R.anim.right_out);
	}

	@Override
	public void onClick(View v) {
		if(v.getId()==R.id.btnBack)
		{
			finish();	
			overridePendingTransition(R.anim.right_in, R.anim.right_out);
		}
		else if(v.getId()==R.id.btnSchedule)
		{
			tvScheduledDate.setText("Visit Scheduled at 2/5/2015 9:40 AM");
		}
		/*else if(v.getId()==R.id.btnCalendar)
		{
			btnMessage.setSelected(false);
			btnBid.setSelected(false);
			btnMenu.setSelected(false);
			btnCalendar.setSelected(true);
		}
		else if(v.getId()==R.id.btnMessage)
		{
			btnCalendar.setSelected(false);
			btnBid.setSelected(false);
			btnMenu.setSelected(false);
			btnMessage.setSelected(true);
		}
		else if(v.getId()==R.id.btnBid)
		{
			btnCalendar.setSelected(false);
			btnMessage.setSelected(false);
			btnMenu.setSelected(false);
			btnBid.setSelected(true);
		}
		else if(v.getId()==R.id.btnMenu)
		{
			btnCalendar.setSelected(false);
			btnMessage.setSelected(false);
			btnBid.setSelected(false);
			btnMenu.setSelected(true);
		}*/
	}
}                                                   
/*public class CalendarActivity extends FragmentActivity{

	@Override
	protected void onCreate(Bundle arg0) {
		super.onCreate(arg0);
		setTheme(android.R.style.Theme_Holo_Light_NoActionBar_TranslucentDecor);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.calendar_activity);

	}*/
//}