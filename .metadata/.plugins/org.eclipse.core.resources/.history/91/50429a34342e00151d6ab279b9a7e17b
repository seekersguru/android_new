package com.wedwiseapp;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONObject;

import com.example.vendordetailpage.MainActivity;
import com.wedwise.adapter.FavAdapter;
import com.wedwise.adapter.SpinnerAdapter;
import com.wedwise.common.GlobalCommonMethods;
import com.wedwise.common.GlobalCommonValues;
import com.wedwise.dialogs.ErrorDialog;
import com.wedwise.fragments.VendorCategoryHomeFragment;

import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.SearchView.OnCloseListener;
import android.widget.Spinner;
import android.widget.TextView;

@SuppressLint("InflateParams")
public class FavListActivity extends FragmentActivity {
	ListView favList;
	FavAdapter adapterSubList;
	Context mContext;
	Button btnBack,btnMenu,btnSearch;//,btnSpinnerOpen;
	ArrayList<FavData> data;
	SearchView searchView;
	//	Spinner spSwitchCategory;
	ArrayList<String> listCategory;
	SpinnerAdapter  adapterSpinner;
	//	ImageView imViewCategoryType;
	TextView tvCategoryType;
	View viewTopbar;
	String category="";
	Button btnCategory;
	Spinner spSwitchCategory;
	String response,url;
	ProgressDialog progress;
	String vendor_type;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		mContext = FavListActivity.this;
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.favorite);
		idInitialization();
	}

	private void idInitialization() {
		//		spSwitchCategory=(Spinner) findViewById(R.id.spSwitchCategory);
		favList = (ListView) findViewById(R.id.favList);
		listCategory=new ArrayList<String>();
		data=new ArrayList<FavData>();
		adapterSubList = new FavAdapter(mContext,data);
		favList.setAdapter(adapterSubList);
		btnBack=(Button) findViewById(R.id.btnBack);
		viewTopbar=findViewById(R.id.viewTopbar);
		viewTopbar.setVisibility(View.GONE);
		searchView=(SearchView) findViewById(R.id.searchView);
		btnSearch=(Button) findViewById(R.id.btnSeacrh);
		tvCategoryType=(TextView) findViewById(R.id.tvCategoryType);
		spSwitchCategory=(Spinner) findViewById(R.id.spSwitchCategory);
		btnCategory=(Button) findViewById(R.id.btnCategory);
		btnCategory.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				spSwitchCategory.performClick();
			}
		});

		if(getIntent()!=null && getIntent().getExtras()!=null)
		{
			vendor_type=getIntent().getExtras().getString("vendor_type");
		}

		ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_spinner_item, VendorCategoryHomeFragment.listItemsCategory);
		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spSwitchCategory.setAdapter(dataAdapter);

		spSwitchCategory.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				category=String.valueOf(spSwitchCategory.getSelectedItem());
				tvCategoryType.setText(category);
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
			}
		});
		//		btnSpinnerOpen=(Button) findViewById(R.id.btnSpinnerOpen);
		btnSearch.setVisibility(View.VISIBLE);
		//		imViewCategoryType.setVisibility(View.VISIBLE);
		tvCategoryType.setVisibility(View.VISIBLE);

		if(getIntent()!=null && getIntent().getExtras()!=null)
		{
			category=getIntent().getExtras().getString("category_type");
			tvCategoryType.setText(category);
		}
		else{
			tvCategoryType.setText("");
		}
		//		actionBar.setDisplayShowCustomEnabled(true);

		listCategory.add("BANQUITE");
		listCategory.add("PHOTOGRAPHY");
		listCategory.add("CATERERS");
		listCategory.add("DECORATORS");
		listCategory.add("OTHERS");
		adapterSpinner=new SpinnerAdapter(FavListActivity.this, listCategory);
		btnSearch.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				btnSearch.setVisibility(View.INVISIBLE);
				searchView.setVisibility(View.VISIBLE);
				tvCategoryType.setText(category.substring(0,1)+"...");
				/*InputFilter[] filterArray = new InputFilter[1];
				filterArray[0] = new InputFilter.LengthFilter(20);
				tvCategoryType.setFilters(filterArray);*/
				searchView.setIconified(false);
				searchView.setBackgroundColor(Color.TRANSPARENT);
				searchView.requestFocus();
				int searchPlateId = searchView.getContext().getResources().getIdentifier("android:id/search_plate", null, null);
				//				searchView.findViewById(searchPlateId).setBackgroundColor(Color.parseColor("#00000000"));
				View searchPlateView=searchView.findViewById(searchPlateId);
				if(searchPlateView!=null)
				{
					searchPlateView.setBackgroundColor(Color.WHITE);
				}
				try {
					int id=searchView.getContext().getResources().getIdentifier("android:id/search_src_text",null,null);
					TextView tv=(TextView) searchView.findViewById(id);
					EditText et=(EditText) searchView.findViewById(id);
					et.setHint("Search Here");
					tv.setTextColor(Color.parseColor("#F05543"));
				} catch (Exception e) {
					e.getMessage();
				}
				searchView.performClick();
			}
		});

		//		spSwitchCategory.setOnItemSelectedListener(new OnItemSelectedListener() {
		//
		//			@Override
		//			public void onItemSelected(AdapterView<?> parent, View view,
		//					int position, long id) {
		//
		//			}
		//
		//			@Override
		//			public void onNothingSelected(AdapterView<?> parent) {
		//			}
		//		});
		searchView.setOnCloseListener(new OnCloseListener() {

			@Override
			public boolean onClose() {

				btnSearch.setVisibility(View.VISIBLE);
				searchView.setVisibility(View.INVISIBLE);
				tvCategoryType.setText(category);
				/*InputFilter[] filterArray = new InputFilter[1];
				filterArray[0] = new InputFilter.LengthFilter(1);
				tvCategoryType.setFilters(filterArray);*/
				//				searchView.setIconified(true);
				return false;
			}
		});
		btnBack.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				finish();		
				overridePendingTransition(R.anim.right_in, R.anim.right_out);
			}
		});

		favList.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> arg0, View viewChild,
					int position, long arg3) {

				Intent myIntent = new Intent(FavListActivity.this,
						MainActivity.class);
				startActivity(myIntent);
				overridePendingTransition(R.anim.right_in, R.anim.left_out);
			}
		});
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		url=GlobalCommonValues.CUSTOMER_VENDOR_MESSAGE_DETAIL;
		new HttpAsyncTask().execute(url);
	}

	private class HttpAsyncTask extends AsyncTask<String, Void, Void> {
		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			if(progress==null)
			{
				progress=new ProgressDialog(mContext);
				progress.show();		
			}
		}

		@Override
		protected Void doInBackground(String... params) {
			try {
				// Calling method for setting to be sent to the server
				SetData();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
		// onPostExecute displays the results of the AsyncTask.
		@SuppressLint("DefaultLocale")
		@Override
		protected void onPostExecute(Void result) {
			if(progress!=null && progress.isShowing())
			{
				progress.dismiss();
				progress=null;
			}
			if(!TextUtils.isEmpty(response) && GlobalCommonMethods.isJSONValid(response))
			{
				try {
					JSONObject jsonObj = new JSONObject(response);	
					System.out.println(jsonObj);
				} catch (Exception e) {
				}
			}
		}
	}

	// Create GetData Method
	public  void  SetData()  throws  UnsupportedEncodingException
	{
		// Create data variable for sent values to server  
		String data="";
		String page_no="1";

		int density = getResources().getDisplayMetrics().densityDpi;
		String image_type="",search_string="";

		if(density==DisplayMetrics.DENSITY_MEDIUM)
		{
			image_type="drawable-hdpi";
		}
		else if(density==DisplayMetrics.DENSITY_HIGH)
		{
			image_type="drawable-xhdpi";
		}
		else if(density==DisplayMetrics.DENSITY_XHIGH)
		{
			image_type="drawable-xhdpi";
		}
		else if(density==DisplayMetrics.DENSITY_XXHIGH)
		{
			image_type="drawable-xxhdpi";
		}
		else if(density==DisplayMetrics.DENSITY_XXXHIGH)
		{
			image_type="drawable-xxxhdpi";
		}

		data= URLEncoder.encode("mode", "UTF-8") 
				+ "=" + URLEncoder.encode("android", "UTF-8"); 

		data += "&" + URLEncoder.encode("image_type", "UTF-8") + "="
				+ URLEncoder.encode(image_type, "UTF-8"); 

		data += "&" + URLEncoder.encode("vendor_type", "UTF-8") + "="
				+ URLEncoder.encode(vendor_type,"UTF-8"); 

		data += "&" + URLEncoder.encode("page_no", "UTF-8") + "="
				+ URLEncoder.encode(page_no, "UTF-8"); 

		data += "&" + URLEncoder.encode("search_string", "UTF-8") + "="
				+ URLEncoder.encode(search_string, "UTF-8"); 


		BufferedReader reader=null;
		// Send data 
		try
		{ 
			URL _url=null;
			// Defined URL  where to send data
			_url= new URL(GlobalCommonValues.CUSTOMER_VENDOR_LIST_AND_SEARCH);
			// Send POST data request

			URLConnection conn = _url.openConnection(); 
			conn.setDoOutput(true); 
			OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()); 
			wr.write( data ); 
			wr.flush(); 

			// Get the server response 
			reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			StringBuilder sb = new StringBuilder();
			String line = null;

			// Read Server Response
			while((line = reader.readLine()) != null)
			{
				// Append server response in string
				sb.append(line + "\n");
			}
			response = sb.toString();
		}
		catch(Exception ex)
		{
		}
		finally
		{
			try
			{
				reader.close();
			}
			catch(Exception ex) {}
		}
	}

	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		super.onBackPressed();
		overridePendingTransition(R.anim.right_in, R.anim.right_out);
	}
}
